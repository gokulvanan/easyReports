TODO

- change json to js for flexible design (impreative + declarative) - done
- support for mongo - done
- changes formatter to be flexible and have impreative option where requrest params could not only modify query logic but also fromatter logic. - done
- cache for list - done
- add support for cron scripts (schedule executor) - done
- provide email reporting feature and ability to send emails - done


- add raw spec to to model to bypass validate, query and format lifecycle
- better approach to meaningful logging
- check use case for singleton require in utils module
- to add code to validate cache connection - prevent from delayed response when memcache doesnt exist
- format method api - to remove results from method args and pass in joins map
- csv and xml support
- csv hide formatter logic
- config.json to keep memcache optional
- address failure cases in json read to report in validate error message
- meaningfull response when validate, build, execute and used
- Collect load test stats 


Couple of points from stackoverflow to consider while making changes to server/cluster code:
If you have enough load to care about multiple cores, then you are going to want to do a few more things too:

Run your Node.js service behind a web-proxy like Nginx or Apache - something that can do connection throttling (unless you want overload conditions to bring the box down completely), rewrite URLs, serve static content, and proxy other sub-services.

Periodically recycle your worker processes. For a long-running process, even a small memory leak will eventually add up.

Setup log collection / monitoring






EMAIL - USE TEMPLATE MAP in send and reportError
- add sample error.html to error reporting
- keep stack trace optional

DAO and MONGO- add methods to provide streaming rather than getting full rows back as result
- add ability to get Pools

MONGO - add pool map concept 

Build wrapper for Cache

Clarify need of common.js

need to rethink logger and its use and avoid cyclic recall in email.js

response builder to work with other response

think on csv and email generation from request

provide raw construction ability

check on js coding convention - use case of prototype to improve efficiency

stablize cron.. use node cron if nedded.

better code documentation

startup code for mongo needed.

need to test full new project creation process

need startserver analogus to startcron
